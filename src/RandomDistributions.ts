// SPDX-FileCopyrightText: Â© 2023 Yake Ho Foong
// SPDX-FileCopyrightText: (c) 2015 Melissa E. O'Neill
// SPDX-FileCopyrightText: (c) 2019 NumPy Developers
// SPDX-License-Identifier: MIT

/**
 * This is a TypeScript port of some of the contents
 * of the following parts of the Numpy library:
 * @see [distributions.c in Numpy] (https://github.com/numpy/numpy/blob/main/numpy/random/src/distributions/distributions.c)
 * @see [ziggurat_constants in Numpy](https://github.com/numpy/numpy/blob/main/numpy/random/src/distributions/ziggurat_constants.h)
 *
 * This module implements unit uniform double and standard normal.
 * @packageDocumentation
 */

import { IRandomBitsGenerator } from "./RandomInterface.js";

import { Uint64 } from "./LongIntMaths.js";

export { RandomDistributions };

// for conversion to double, copied from Numpy, see
// https://github.com/numpy/numpy/blob/main/numpy/random/_common.pxd
const UINT53_TO_DOUBLE: number = 1.0 / 9007199254740992.0;

// Ziggurate constants from Numpy
// https://github.com/numpy/numpy/blob/main/numpy/random/src/distributions/ziggurat_constants.h

// eslint-disable-next-line @typescript-eslint/no-loss-of-precision
const zigguratNorR = 3.6541528853610087963519472518;
// eslint-disable-next-line @typescript-eslint/no-loss-of-precision
const zigguratNorInvR = 0.27366123732975827203338247596; // 1.0 / zigguratNorR;

const wiDouble: number[] = [
  8.68362706080130616677e-16, 4.77933017572773682428e-17, 6.35435241740526230246e-17, 7.45487048124769627714e-17,
  8.32936681579309972857e-17, 9.06806040505948228243e-17, 9.71486007656776183958e-17, 1.02947503142410192108e-16,
  1.08234302884476839838e-16, 1.13114701961090307945e-16, 1.17663594570229211411e-16, 1.2193617278714363328e-16,
  1.25974399146370927864e-16, 1.29810998862640315416e-16, 1.33472037368241227547e-16, 1.36978648425712032797e-16,
  1.40348230012423820659e-16, 1.4359529452056943027e-16, 1.46732087423644219083e-16, 1.49769046683910367425e-16,
  1.5271515003596197975e-16, 1.55578181694607639484e-16, 1.58364940092908853989e-16, 1.61081401752749279325e-16,
  1.63732852039698532012e-16, 1.66323990584208352778e-16, 1.68859017086765964015e-16, 1.71341701765596607184e-16,
  1.7377544365864859331e-16, 1.76163319230009959832e-16, 1.78508123169767272927e-16, 1.80812402857991522674e-16,
  1.83078487648267501776e-16, 1.85308513886180189386e-16, 1.87504446393738816849e-16, 1.89668097007747596212e-16,
  1.91801140648386198029e-16, 1.93905129306251037069e-16, 1.95981504266288244037e-16, 1.98031606831281739736e-16,
  2.00056687762733300198e-16, 2.02057915620716538808e-16, 2.04036384154802118313e-16, 2.05993118874037063144e-16,
  2.07929082904140197311e-16, 2.0984518222370351669e-16, 2.11742270357603418769e-16, 2.13621152594498681022e-16,
  2.15482589785814580926e-16, 2.1732730177564367499e-16, 2.19155970504272708519e-16, 2.20969242822353175995e-16,
  2.22767733047895534948e-16, 2.24552025294143552381e-16, 2.26322675592856786566e-16, 2.28080213834501706782e-16,
  2.29825145544246839061e-16, 2.31557953510408037008e-16, 2.33279099280043561128e-16, 2.34989024534709550938e-16,
  2.36688152357916037468e-16, 2.38376888404542434981e-16, 2.40055621981350627349e-16, 2.41724727046750252175e-16,
  2.433845631371102864e-16, 2.45035476226149539878e-16, 2.46677799523270498158e-16, 2.48311854216108767769e-16,
  2.49937950162045242375e-16, 2.51556386532965786439e-16, 2.53167452417135826983e-16, 2.54771427381694417303e-16,
  2.56368581998939683749e-16, 2.579591783392867235e-16, 2.59543470433517070146e-16, 2.61121704706701939097e-16,
  2.62694120385972564623e-16, 2.64260949884118951286e-16, 2.65822419160830680292e-16, 2.67378748063236329361e-16,
  2.68930150647261591777e-16, 2.70476835481199518794e-16, 2.72019005932773206655e-16, 2.73556860440867908686e-16,
  2.75090592773016664571e-16, 2.76620392269639032183e-16, 2.78146444075954410103e-16, 2.79668929362423005309e-16,
  2.81188025534502074329e-16, 2.82703906432447923059e-16, 2.8421674252184060652e-16, 2.85726701075460149289e-16,
  2.87233946347097994381e-16, 2.88738639737848191815e-16, 2.9024093995538423323e-16, 2.91741003166694553259e-16,
  2.93238983144718163965e-16, 2.94735031409293489611e-16, 2.96229297362806647792e-16, 2.97721928420902891115e-16,
  2.99213070138601307081e-16, 3.00702866332133102993e-16, 3.02191459196806151971e-16, 3.03678989421180184427e-16,
  3.05165596297821922381e-16, 3.06651417830895451744e-16, 3.08136590840829717032e-16, 3.09621251066292253306e-16,
  3.11105533263689296831e-16, 3.12589571304399892784e-16, 3.14073498269944617203e-16, 3.15557446545280064031e-16,
  3.17041547910402852545e-16, 3.18525933630440648871e-16, 3.20010734544401137886e-16, 3.21496081152744704901e-16,
  3.22982103703941557538e-16, 3.24468932280169778077e-16, 3.2595669688230783834e-16, 3.27445527514370671802e-16,
  3.28935554267536967851e-16, 3.30426907403912838589e-16, 3.31919717440175233652e-16, 3.33414115231237245918e-16,
  3.34910232054077845412e-16, 3.36408199691876507948e-16, 3.37908150518594979994e-16, 3.39410217584148914282e-16,
  3.40914534700312603713e-16, 3.42421236527501816058e-16, 3.4393045866258313392e-16, 3.45442337727858401604e-16,
  3.46957011461378353333e-16, 3.484746188087413707e-16, 3.49995300016538099813e-16, 3.51519196727607440975e-16,
  3.53046452078274009054e-16, 3.5457721079774357216e-16, 3.56111619309838843415e-16, 3.57649825837265051035e-16,
  3.59191980508602994994e-16, 3.60738235468235137839e-16, 3.62288744989419151904e-16, 3.63843665590734438546e-16,
  3.65403156156136995766e-16, 3.66967378058870090021e-16, 3.68536495289491401456e-16, 3.70110674588289834952e-16,
  3.71690085582382297792e-16, 3.73274900927794352614e-16, 3.74865296456848868882e-16, 3.76461451331202869131e-16,
  3.78063548200896037651e-16, 3.79671773369794425924e-16, 3.81286316967837738238e-16, 3.82907373130524317507e-16,
  3.84535140186095955858e-16, 3.86169820850914927119e-16, 3.87811622433558721164e-16, 3.89460757048192620674e-16,
  3.9111744183782054206e-16, 3.9278189920805415327e-16, 3.94454357072087711446e-16, 3.96135049107613542983e-16,
  3.97824215026468259474e-16, 3.99522100857856502444e-16, 4.01228959246062907451e-16, 4.02945049763632792393e-16,
  4.04670639241074995115e-16, 4.06406002114225038723e-16, 4.0815142079049387348e-16, 4.09907186035326643447e-16,
  4.1167359738030257017e-16, 4.13450963554423599878e-16, 4.15239602940268833891e-16, 4.17039844056831587498e-16,
  4.18852026071011229572e-16, 4.20676499339901510978e-16, 4.2251362598620493732e-16, 4.24363780509307796137e-16,
  4.26227350434779809917e-16, 4.28104737005311666397e-16, 4.29996355916383230161e-16, 4.31902638100262944617e-16,
  4.33824030562279080411e-16, 4.35760997273684900553e-16, 4.37714020125858747008e-16, 4.39683599951052137423e-16,
  4.41670257615420348435e-16, 4.43674535190656726604e-16, 4.45696997211204306674e-16, 4.47738232024753387312e-16,
  4.49798853244554968009e-16, 4.51879501313005876278e-16, 4.53980845187003400947e-16, 4.56103584156742206384e-16,
  4.58248449810956667052e-16, 4.60416208163115281428e-16, 4.62607661954784567754e-16, 4.6482365315432073778e-16,
  4.67065065671263059081e-16, 4.69332828309332890697e-16, 4.71627917983835129766e-16, 4.73951363232586715165e-16,
  4.76304248053313737663e-16, 4.78687716104872284247e-16, 4.81102975314741720538e-16, 4.83551302941152515162e-16,
  4.86034051145081195402e-16, 4.8855265313536034328e-16, 4.91108629959526955862e-16, 4.93703598024033454728e-16,
  4.96339277440398725619e-16, 4.99017501309182245754e-16, 5.01740226071808946011e-16, 5.04509543081872748637e-16,
  5.07327691573354207058e-16, 5.10197073234156184149e-16, 5.131202686306783732e-16, 5.16100055774322824569e-16,
  5.19139431175769859873e-16, 5.2224163380002342876e-16, 5.25410172417759732697e-16, 5.28648856950494511482e-16,
  5.31961834533840037535e-16, 5.35353631181649688145e-16, 5.3882920013340532016e-16, 5.42393978220171234073e-16,
  5.46053951907478041166e-16, 5.49815735089281410703e-16, 5.53686661246787600374e-16, 5.57674893292657647836e-16,
  5.6178955535554166583e-16, 5.66040892008242216739e-16, 5.70440462129138908417e-16, 5.75001376891989523684e-16,
  5.79738594572459365014e-16, 5.84669289345547900201e-16, 5.89813317647789942685e-16, 5.95193814964144415532e-16,
  6.00837969627190832234e-16, 6.06778040933344851394e-16, 6.13052720872528159123e-16, 6.19708989458162555387e-16,
  6.26804696330128439415e-16, 6.34412240712750598627e-16, 6.42623965954805540945e-16, 6.51560331734499356881e-16,
  6.61382788509766415145e-16, 6.72315046250558662913e-16, 6.84680341756425875856e-16, 6.98971833638761995415e-16,
  7.1599949348306642156e-16, 7.37242430179879890722e-16, 7.65893637080557275482e-16, 8.11384933765648418565e-16,
];

const fiDouble: number[] = [
  1.0, 9.77101701267671596263e-1, 9.59879091800106665211e-1, 9.4519895344229964973e-1, 9.32060075959230460718e-1,
  9.1999150503934701284e-1, 9.08726440052130879366e-1, 8.9809592189834341891e-1, 8.87984660755833377088e-1,
  8.78309655808917399966e-1, 8.69008688036857046555e-1, 8.60033621196331532488e-1, 8.51346258458677951353e-1,
  8.42915653112204177333e-1, 8.34716292986883434679e-1, 8.26726833946221373317e-1, 8.18929191603702366642e-1,
  8.11307874312656274185e-1, 8.03849483170964274059e-1, 7.96542330422958966274e-1, 7.89376143566024590648e-1,
  7.82341832654802504798e-1, 7.75431304981187174974e-1, 7.6863731579848626474e-1, 7.61953346836795386565e-1,
  7.55373506507096115214e-1, 7.48892447219156820459e-1, 7.4250529634015105529e-1, 7.36207598126862650112e-1,
  7.29995264561476231435e-1, 7.23864533468630222401e-1, 7.17811932630721960535e-1, 7.118342488782484212e-1,
  7.05928501332754310127e-1, 7.00091918136511615067e-1, 6.94321916126116711609e-1, 6.88616083004671808432e-1,
  6.82972161644994857355e-1, 6.77388036218773526009e-1, 6.71861719897082099173e-1, 6.66391343908750100056e-1,
  6.60975147776663107813e-1, 6.55611470579697264149e-1, 6.50298743110816701574e-1, 6.45035480820822293424e-1,
  6.3982027745305658506e-1, 6.34651799287623608059e-1, 6.29528779924836690007e-1, 6.24450015547026504592e-1,
  6.19414360605834324325e-1, 6.14420723888913888899e-1, 6.09468064925773433949e-1, 6.04555390697467776029e-1,
  5.99681752619125263415e-1, 5.94846243767987448159e-1, 5.90047996332826008015e-1, 5.85286179263371453274e-1,
  5.80559996100790898232e-1, 5.75868682972353718164e-1, 5.71211506735253227163e-1, 5.66587763256164445025e-1,
  5.61996775814524340831e-1, 5.57437893618765945014e-1, 5.52910490425832290562e-1, 5.48413963255265812791e-1,
  5.43947731190026262382e-1, 5.39511234256952132426e-1, 5.35103932380457614215e-1, 5.30725304403662057062e-1,
  5.26374847171684479008e-1, 5.22052074672321841931e-1, 5.17756517229756352272e-1, 5.13487720747326958914e-1,
  5.09245245995747941592e-1, 5.05028667943468123624e-1, 5.00837575126148681903e-1, 4.96671569052489714213e-1,
  4.92530263643868537748e-1, 4.88413284705458028423e-1, 4.84320269426683325253e-1, 4.80250865909046753544e-1,
  4.76204732719505863248e-1, 4.7218153846773019966e-1, 4.68180961405693596422e-1, 4.64202689048174355069e-1,
  4.60246417812842867345e-1, 4.56311852678716434184e-1, 4.52398706861848520777e-1, 4.48506701507203064949e-1,
  4.44635565395739396077e-1, 4.40785034665803987508e-1, 4.36954852547985550526e-1, 4.33144769112652261445e-1,
  4.29354541029441427735e-1, 4.2558393133802197017e-1, 4.21832709229495894654e-1, 4.1810064983784822612e-1,
  4.14387534040891125642e-1, 4.106931482701881575e-1, 4.07017284329473372217e-1, 4.0335973922111451051e-1,
  3.99720314980197222177e-1, 3.96098818515832451492e-1, 3.92495061459315619512e-1, 3.88908860018788715696e-1,
  3.85340034840077283462e-1, 3.81788410873393657674e-1, 3.7825381724561918384e-1, 3.74736087137891138443e-1,
  3.71235057668239498696e-1, 3.67750569779032587814e-1, 3.64282468129004055601e-1, 3.60830600989648031529e-1,
  3.57394820145780500731e-1, 3.53974980800076777232e-1, 3.50570941481406106455e-1, 3.471825639567936439e-1,
  3.43809713146850715049e-1, 3.40452257044521866547e-1, 3.37110066637006045021e-1, 3.33783015830718454708e-1,
  3.304709813791635864e-1, 3.2717384281360140097e-1, 3.2389148237639109329e-1, 3.20623784956905355514e-1,
  3.17370638029913609834e-1, 3.14131931596337177215e-1, 3.10907558126286509559e-1, 3.07697412504292056035e-1,
  3.04501391976649993243e-1, 3.01319396100803049698e-1, 2.98151326696685481377e-1, 2.94997087799961810184e-1,
  2.91856585617095209972e-1, 2.88729728482182923521e-1, 2.85616426815501756042e-1, 2.82516593083707578948e-1,
  2.79430141761637940157e-1, 2.76356989295668320494e-1, 2.73297054068577072172e-1, 2.70250256365875463072e-1,
  2.67216518343561471038e-1, 2.64195763997261190426e-1, 2.61187919132721213522e-1, 2.5819291133761923529e-1,
  2.552106699546619617e-1, 2.52241126055942177508e-1, 2.49284212418528522415e-1, 2.46339863501263828249e-1,
  2.43408015422750312329e-1, 2.40488605940500588254e-1, 2.37581574431238090606e-1, 2.34686861872330010392e-1,
  2.31804410824338724684e-1, 2.28934165414680340644e-1, 2.26076071322380278694e-1, 2.23230075763917484855e-1,
  2.20396127480151998723e-1, 2.17574176724331130872e-1, 2.14764175251173583536e-1, 2.11966076307030182324e-1,
  2.09179834621125076977e-1, 2.06405406397880797353e-1, 2.03642749310334908452e-1, 2.00891822494656591136e-1,
  1.98152586545775138971e-1, 1.95425003514134304483e-1, 1.92709036903589175926e-1, 1.90004651670464985713e-1,
  1.87311814223800304768e-1, 1.84630492426799269756e-1, 1.81960655599522513892e-1, 1.79302274522847582272e-1,
  1.76655321443734858455e-1, 1.74019770081838553999e-1, 1.71395595637505754327e-1, 1.68782774801211288285e-1,
  1.66181285764481906364e-1, 1.63591108232365584074e-1, 1.61012223437511009516e-1, 1.58444614155924284882e-1,
  1.55888264724479197465e-1, 1.53343161060262855866e-1, 1.50809290681845675763e-1, 1.48286642732574552861e-1,
  1.4577520800599402806e-1, 1.43274978973513461566e-1, 1.4078594981444469969e-1, 1.38308116448550733057e-1,
  1.35841476571253755301e-1, 1.33386029691669155683e-1, 1.3094177717364435809e-1, 1.28508722279999570981e-1,
  1.26086870220185887081e-1, 1.23676228201596571932e-1, 1.21276805484790306533e-1, 1.18888613442910059947e-1,
  1.16511665625610869035e-1, 1.14145977827838487895e-1, 1.11791568163838089811e-1, 1.09448457146811797824e-1,
  1.07116667774683801961e-1, 1.04796225622487068629e-1, 1.02487158941935246892e-1, 1.00189498768810017482e-1,
  9.79032790388624646338e-2, 9.56285367130089991594e-2, 9.33653119126910124859e-2, 9.11136480663737591268e-2,
  8.88735920682758862021e-2, 8.66451944505580717859e-2, 8.44285095703534715916e-2, 8.22235958132029043366e-2,
  8.00305158146630696292e-2, 7.78493367020961224423e-2, 7.56801303589271778804e-2, 7.35229737139813238622e-2,
  7.13779490588904025339e-2, 6.92451443970067553879e-2, 6.71246538277884968737e-2, 6.50165779712428976156e-2,
  6.29210244377581412456e-2, 6.08381083495398780614e-2, 5.8767952920933737293e-2, 5.67106901062029017391e-2,
  5.46664613248889208474e-2, 5.26354182767921896513e-2, 5.06177238609477817e-2, 4.86135532158685421122e-2,
  4.66230949019303814174e-2, 4.46465522512944634759e-2, 4.2684144916474459075e-2, 4.07361106559409394401e-2,
  3.88027074045261474722e-2, 3.68842156885673053135e-2, 3.49809414617161251737e-2, 3.30932194585785779961e-2,
  3.12214171919203004046e-2, 2.93659397581333588001e-2, 2.75272356696031131329e-2, 2.57058040085489103443e-2,
  2.39022033057958785407e-2, 2.21170627073088502113e-2, 2.03510962300445102935e-2, 1.86051212757246224594e-2,
  1.68800831525431419e-2, 1.51770883079353092332e-2, 1.34974506017398673818e-2, 1.18427578579078790488e-2,
  1.02149714397014590439e-2, 8.616582769398726388e-3, 7.05087547137322242369e-3, 5.52240329925099155545e-3,
  4.03797259336302356153e-3, 2.60907274610215926189e-3, 1.26028593049859797236e-3,
];

const kiRaw: number[][] = [
  [0xef6a, 0x8025, 0xf33d, 0x000e],
  [0x0000, 0x0000, 0x0000, 0x0000],
  [0xc6a8, 0x98fb, 0x08be, 0x000c],
  [0x8142, 0xfabd, 0xa354, 0x000d],
  [0xeeea, 0x7ec1, 0x51f6, 0x000e],
  [0xf77e, 0xe9d3, 0xb255, 0x000e],
  [0xcab9, 0x817e, 0xef4b, 0x000e],
  [0x44aa, 0x0afa, 0x1947, 0x000f],
  [0xcb18, 0x61ff, 0x37ed, 0x000f],
  [0x255c, 0x9561, 0x4f46, 0x000f],
  [0xa396, 0xe41b, 0x61a5, 0x000f],
  [0x96a4, 0x7553, 0x707a, 0x000f],
  [0x449a, 0xec28, 0x7cb2, 0x000f],
  [0x57d3, 0x0c63, 0x86f1, 0x000f],
  [0x25de, 0x5783, 0x8fa6, 0x000f],
  [0xd0da, 0xc74d, 0x9724, 0x000f],
  [0xf509, 0x07db, 0x9da9, 0x000f],
  [0xfa74, 0xf581, 0xa360, 0x000f],
  [0x4bf8, 0xde5b, 0xa86f, 0x000f],
  [0x54dc, 0x60d3, 0xacf1, 0x000f],
  [0xb90f, 0x6718, 0xb0fb, 0x000f],
  [0x74c6, 0x8d53, 0xb49f, 0x000f],
  [0xfe77, 0x2366, 0xb7ec, 0x000f],
  [0xe50e, 0xe9a1, 0xbaec, 0x000f],
  [0x0bed, 0x9d04, 0xbdab, 0x000f],
  [0x6c57, 0x60ff, 0xc030, 0x000f],
  [0xa248, 0x1037, 0xc282, 0x000f],
  [0x5bd1, 0x7ae2, 0xc4a6, 0x000f],
  [0xee31, 0x977a, 0xc6a2, 0x000f],
  [0x96a4, 0xa928, 0xc87a, 0x000f],
  [0xde85, 0x5e4b, 0xca32, 0x000f],
  [0x231a, 0xe902, 0xcbcc, 0x000f],
  [0x39c4, 0x12f8, 0xcd4d, 0x000f],
  [0xec99, 0x4d8f, 0xceb5, 0x000f],
  [0xc930, 0xbf1d, 0xd007, 0x000f],
  [0xc4e6, 0x4dd6, 0xd146, 0x000f],
  [0xf450, 0xa8e2, 0xd272, 0x000f],
  [0xc91e, 0x4ff0, 0xd38e, 0x000f],
  [0xb478, 0x9990, 0xd49a, 0x000f],
  [0x0f53, 0xb892, 0xd598, 0x000f],
  [0x99ec, 0xc08e, 0xd689, 0x000f],
  [0xe832, 0xa9c8, 0xd76e, 0x000f],
  [0x08e8, 0x547b, 0xd848, 0x000f],
  [0x2c8c, 0x8bad, 0xd917, 0x000f],
  [0xadd2, 0x07a7, 0xd9dd, 0x000f],
  [0x5e8c, 0x7010, 0xda99, 0x000f],
  [0x2e20, 0x5dc0, 0xdb4d, 0x000f],
  [0xfcd0, 0x5c5b, 0xdbf9, 0x000f],
  [0x9a7d, 0xebb9, 0xdc9d, 0x000f],
  [0x729d, 0x8118, 0xdd3b, 0x000f],
  [0x2f90, 0x8834, 0xddd2, 0x000f],
  [0x9f64, 0x6436, 0xde63, 0x000f],
  [0x514e, 0x708d, 0xdeee, 0x000f],
  [0xb42e, 0x01a6, 0xdf74, 0x000f],
  [0xed40, 0x6599, 0xdff4, 0x000f],
  [0x24f2, 0xe4bc, 0xe06f, 0x000f],
  [0xa258, 0xc225, 0xe0e6, 0x000f],
  [0xb84c, 0x3c28, 0xe159, 0x000f],
  [0x3f99, 0x8cbc, 0xe1c7, 0x000f],
  [0x1caa, 0xe9db, 0xe231, 0x000f],
  [0x1b91, 0x85da, 0xe298, 0x000f],
  [0x4186, 0x8fb5, 0xe2fb, 0x000f],
  [0x8d4a, 0x3355, 0xe35b, 0x000f],
  [0x002a, 0x99d0, 0xe3b7, 0x000f],
  [0xad7f, 0xe99e, 0xe410, 0x000f],
  [0x7734, 0x46d4, 0xe467, 0x000f],
  [0x095c, 0xd34c, 0xe4ba, 0x000f],
  [0x9524, 0xaed2, 0xe50b, 0x000f],
  [0xbc78, 0xf74e, 0xe559, 0x000f],
  [0x1212, 0xc8e4, 0xe5a5, 0x000f],
  [0x8689, 0x3e13, 0xe5ef, 0x000f],
  [0x1078, 0x6fd9, 0xe636, 0x000f],
  [0xd578, 0x75c6, 0xe67b, 0x000f],
  [0x11aa, 0x661e, 0xe6be, 0x000f],
  [0xf4f2, 0x55e5, 0xe6ff, 0x000f],
  [0xa702, 0x5900, 0xe73e, 0x000f],
  [0x9e39, 0x823e, 0xe77b, 0x000f],
  [0x70a2, 0xe370, 0xe7b6, 0x000f],
  [0x4243, 0x8d77, 0xe7f0, 0x000f],
  [0xf08c, 0x9053, 0xe828, 0x000f],
  [0x173a, 0xfb35, 0xe85e, 0x000f],
  [0x0864, 0xdc84, 0xe893, 0x000f],
  [0xcebc, 0x41f0, 0xe8c7, 0x000f],
  [0x4ef6, 0x387d, 0xe8f9, 0x000f],
  [0x9b1d, 0xcc87, 0xe929, 0x000f],
  [0x88ea, 0x09d3, 0xe959, 0x000f],
  [0x9aa2, 0xfb93, 0xe986, 0x000f],
  [0x4866, 0xac71, 0xe9b3, 0x000f],
  [0xb6d5, 0x2694, 0xe9df, 0x000f],
  [0xe67c, 0x73ab, 0xea09, 0x000f],
  [0x66a4, 0x9cf1, 0xea32, 0x000f],
  [0x952c, 0xab32, 0xea5a, 0x000f],
  [0x741a, 0xa6d5, 0xea81, 0x000f],
  [0x1cf0, 0x97de, 0xeaa7, 0x000f],
  [0xd920, 0x85f3, 0xeacc, 0x000f],
  [0xe63c, 0x7865, 0xeaf0, 0x000f],
  [0xec13, 0x762f, 0xeb13, 0x000f],
  [0x2a4a, 0x85fe, 0xeb35, 0x000f],
  [0x62b4, 0xae31, 0xeb56, 0x000f],
  [0x84fa, 0xf4e2, 0xeb76, 0x000f],
  [0x2014, 0x5fe6, 0xeb96, 0x000f],
  [0x9d7c, 0xf4cf, 0xebb4, 0x000f],
  [0x49d0, 0xb8f4, 0xebd2, 0x000f],
  [0x2e3e, 0xb16e, 0xebef, 0x000f],
  [0xbde8, 0xe31e, 0xec0b, 0x000f],
  [0x5a15, 0x52b1, 0xec27, 0x000f],
  [0xafd3, 0x049d, 0xec42, 0x000f],
  [0xf196, 0xfd29, 0xec5b, 0x000f],
  [0xeef4, 0x406c, 0xec75, 0x000f],
  [0x0cb4, 0xd250, 0xec8d, 0x000f],
  [0x1f12, 0xb691, 0xeca5, 0x000f],
  [0x27fe, 0xf0c4, 0xecbc, 0x000f],
  [0xfb15, 0x8454, 0xecd3, 0x000f],
  [0xc8b3, 0x7488, 0xece9, 0x000f],
  [0x91b7, 0xc47f, 0xecfe, 0x000f],
  [0x8528, 0x7735, 0xed13, 0x000f],
  [0x4903, 0x8f84, 0xed27, 0x000f],
  [0x2f4c, 0x1024, 0xed3b, 0x000f],
  [0x586e, 0xfbad, 0xed4d, 0x000f],
  [0xc3dd, 0x5498, 0xed60, 0x000f],
  [0x4fe8, 0x1d41, 0xed72, 0x000f],
  [0xa982, 0x57e4, 0xed83, 0x000f],
  [0x2cc8, 0x06a4, 0xed94, 0x000f],
  [0xb704, 0x2b85, 0xeda4, 0x000f],
  [0x6ab4, 0xc874, 0xedb3, 0x000f],
  [0x6652, 0xdf41, 0xedc2, 0x000f],
  [0x6e52, 0x71a4, 0xedd1, 0x000f],
  [0x8ad3, 0x813c, 0xeddf, 0x000f],
  [0x9980, 0x0f90, 0xeded, 0x000f],
  [0xd414, 0x1e0f, 0xedfa, 0x000f],
  [0x4bc4, 0xae12, 0xee06, 0x000f],
  [0x5a06, 0xc0d9, 0xee12, 0x000f],
  [0x06e0, 0x5790, 0xee1e, 0x000f],
  [0x6524, 0x734b, 0xee29, 0x000f],
  [0xe4bc, 0x150a, 0xee34, 0x000f],
  [0x9b3c, 0x3db8, 0xee3e, 0x000f],
  [0x82f4, 0xee29, 0xee47, 0x000f],
  [0xb086, 0x271d, 0xee51, 0x000f],
  [0x7f41, 0xe940, 0xee59, 0x000f],
  [0xb42e, 0x3528, 0xee62, 0x000f],
  [0x97f1, 0x0b58, 0xee6a, 0x000f],
  [0x077a, 0x6c3e, 0xee71, 0x000f],
  [0x7b82, 0x5832, 0xee78, 0x000f],
  [0x06ba, 0xcf7b, 0xee7e, 0x000f],
  [0x4ab2, 0xd248, 0xee84, 0x000f],
  [0x6343, 0x60b6, 0xee8a, 0x000f],
  [0xc851, 0x7acc, 0xee8f, 0x000f],
  [0x25da, 0x207e, 0xee94, 0x000f],
  [0x29ea, 0x51a8, 0xee98, 0x000f],
  [0x485c, 0x0e13, 0xee9c, 0x000f],
  [0x73f4, 0x5572, 0xee9f, 0x000f],
  [0xccae, 0x2762, 0xeea2, 0x000f],
  [0x42ac, 0x836b, 0xeea4, 0x000f],
  [0x2d71, 0x68fc, 0xeea6, 0x000f],
  [0xd6fa, 0xd76e, 0xeea7, 0x000f],
  [0xfa0a, 0xce04, 0xeea8, 0x000f],
  [0x333b, 0x4be8, 0xeea9, 0x000f],
  [0x6410, 0x5029, 0xeea9, 0x000f],
  [0x075e, 0xd9c0, 0xeea8, 0x000f],
  [0x7654, 0xe789, 0xeea7, 0x000f],
  [0x1d24, 0x7848, 0xeea6, 0x000f],
  [0x9e83, 0x8aa2, 0xeea4, 0x000f],
  [0xe4da, 0x1d22, 0xeea2, 0x000f],
  [0x2024, 0x2e35, 0xee9f, 0x000f],
  [0xaf2e, 0xbc26, 0xee9b, 0x000f],
  [0xf2e4, 0xc524, 0xee97, 0x000f],
  [0x0a3a, 0x473c, 0xee93, 0x000f],
  [0x7516, 0x4055, 0xee8e, 0x000f],
  [0x9c7a, 0xae36, 0xee88, 0x000f],
  [0x3dfd, 0x8e7f, 0xee82, 0x000f],
  [0xb888, 0xdea7, 0xee7b, 0x000f],
  [0x37ff, 0x9bff, 0xee74, 0x000f],
  [0xbd5e, 0xc3a9, 0xee6c, 0x000f],
  [0x007e, 0x529e, 0xee64, 0x000f],
  [0x2888, 0x45a3, 0xee5b, 0x000f],
  [0x57b6, 0x994e, 0xee51, 0x000f],
  [0x06cf, 0x4a00, 0xee47, 0x000f],
  [0x2c50, 0x53e1, 0xee3c, 0x000f],
  [0x2ad8, 0xb2e0, 0xee30, 0x000f],
  [0x8205, 0x62ad, 0xee24, 0x000f],
  [0x3c5a, 0x5eb8, 0xee17, 0x000f],
  [0x1447, 0xa22a, 0xee09, 0x000f],
  [0x49cc, 0x27e3, 0xedfb, 0x000f],
  [0x216c, 0xea76, 0xedeb, 0x000f],
  [0x047e, 0xe422, 0xeddb, 0x000f],
  [0x39d3, 0x0ece, 0xedcb, 0x000f],
  [0x2cf4, 0x6404, 0xedb9, 0x000f],
  [0x38c9, 0xdce9, 0xeda6, 0x000f],
  [0xe98d, 0x7237, 0xed93, 0x000f],
  [0xa836, 0x1c38, 0xed7f, 0x000f],
  [0xc02b, 0xd2b9, 0xed69, 0x000f],
  [0xae00, 0x8d06, 0xed53, 0x000f],
  [0xa422, 0x41de, 0xed3c, 0x000f],
  [0x2fd8, 0xe76a, 0xed23, 0x000f],
  [0xe644, 0x732f, 0xed0a, 0x000f],
  [0xfe34, 0xda07, 0xecef, 0x000f],
  [0xb7b8, 0x100e, 0xecd4, 0x000f],
  [0x6eb4, 0x0895, 0xecb7, 0x000f],
  [0x30c1, 0xb612, 0xec98, 0x000f],
  [0xa978, 0x0a0d, 0xec79, 0x000f],
  [0x31fe, 0xf50f, 0xec57, 0x000f],
  [0xc962, 0x6686, 0xec35, 0x000f],
  [0xb335, 0x4cb4, 0xec11, 0x000f],
  [0x6fd0, 0x948e, 0xebeb, 0x000f],
  [0xb692, 0x29a0, 0xebc4, 0x000f],
  [0x0cdc, 0xf5ee, 0xeb9a, 0x000f],
  [0x8542, 0xe1c9, 0xeb6f, 0x000f],
  [0x1f9e, 0xd3ad, 0xeb42, 0x000f],
  [0x2d4b, 0xb00b, 0xeb13, 0x000f],
  [0x02e9, 0x591a, 0xeae2, 0x000f],
  [0x2257, 0xae99, 0xeaae, 0x000f],
  [0xe326, 0x8d8e, 0xea78, 0x000f],
  [0x73e5, 0xcffd, 0xea3f, 0x000f],
  [0xd9f6, 0x4c8d, 0xea04, 0x000f],
  [0x563b, 0xd62f, 0xe9c5, 0x000f],
  [0x47a4, 0x3ba9, 0xe984, 0x000f],
  [0x4728, 0x471d, 0xe93f, 0x000f],
  [0xc5d6, 0xbd76, 0xe8f6, 0x000f],
  [0xe8e6, 0x5dc4, 0xe8aa, 0x000f],
  [0xb1ea, 0xe07a, 0xe859, 0x000f],
  [0xa940, 0xf690, 0xe804, 0x000f],
  [0x33c0, 0x4882, 0xe7ab, 0x000f],
  [0x6aa5, 0x751f, 0xe74c, 0x000f],
  [0xa202, 0x102a, 0xe6e8, 0x000f],
  [0xabd8, 0xa0b6, 0xe67d, 0x000f],
  [0x307e, 0x9f38, 0xe60c, 0x000f],
  [0xf742, 0x7338, 0xe594, 0x000f],
  [0x7280, 0x7097, 0xe514, 0x000f],
  [0xf458, 0xd436, 0xe48b, 0x000f],
  [0x1e37, 0xbffd, 0xe3f9, 0x000f],
  [0xb19c, 0x35ee, 0xe35d, 0x000f],
  [0xe4fe, 0x122f, 0xe2b5, 0x000f],
  [0x5557, 0x0399, 0xe200, 0x000f],
  [0x8314, 0x8278, 0xe13c, 0x000f],
  [0x67b0, 0xc4ee, 0xe068, 0x000f],
  [0x71aa, 0xb02b, 0xdf82, 0x000f],
  [0xfeaa, 0xc57e, 0xde87, 0x000f],
  [0x3bfd, 0x09c6, 0xdd75, 0x000f],
  [0xbf13, 0xe529, 0xdc46, 0x000f],
  [0x0282, 0xf82e, 0xdaf8, 0x000f],
  [0xba75, 0xe1b2, 0xd985, 0x000f],
  [0xcf04, 0xef48, 0xd7e6, 0x000f],
  [0x650b, 0xadbd, 0xd613, 0x000f],
  [0xf012, 0x49e2, 0xd401, 0x000f],
  [0xc7ac, 0xa7b4, 0xd1a1, 0x000f],
  [0x1f9e, 0x0476, 0xcee2, 0x000f],
  [0x11b2, 0xd85e, 0xcba8, 0x000f],
  [0x2d22, 0x6ecd, 0xc7d2, 0x000f],
  [0x22ed, 0x2f1e, 0xc32b, 0x000f],
  [0xb83a, 0x81c0, 0xbd65, 0x000f],
  [0x5434, 0xc400, 0xb606, 0x000f],
  [0x2874, 0x582a, 0xac40, 0x000f],
  [0x4598, 0x1e01, 0x9e97, 0x000f],
  [0x1dfc, 0x48a4, 0x89fa, 0x000f],
  [0x302c, 0xf7f0, 0x66c5, 0x000f],
  [0x1c4a, 0x4b33, 0x1a5a, 0x000f],
];

const kiUint64: Uint64[] = [];

for (let i = 0; i < 256; i++) {
  const x: Uint64 = new Uint64();
  x.values.set(kiRaw[i]);
  kiUint64.push(x);
}

class RandomDistributions {
  readonly bitsGenerator: IRandomBitsGenerator;
  private readonly uint64: Uint64;
  private readonly r: Uint64;
  private readonly rabs: Uint64;

  constructor(bitsGenerator: IRandomBitsGenerator) {
    this.bitsGenerator = bitsGenerator;
    this.uint64 = new Uint64();
    this.r = new Uint64();
    this.rabs = new Uint64();
  }

  /**
   * @returns - next random number (double) in the semi-open interval [0, 1)
   */
  randomUnit(): number {
    this.bitsGenerator.nextUint64(this.uint64);
    return this.uint64.leftmost53bits() * UINT53_TO_DOUBLE;
  }

  /**
   * @returns - next random standard normal, i.e.,
   * mean of zero and standard deviation of one.
   * The Ziggurat method is used for speed. Both the algorithm and constants are copied from Numpy.
   * @see [distributions.c in Numpy] (https://github.com/numpy/numpy/blob/main/numpy/random/src/distributions/distributions.c)
   * @see [ziggurat_constants in Numpy](https://github.com/numpy/numpy/blob/main/numpy/random/src/distributions/ziggurat_constants.h)
   */
  randomStandardNormal(): number {
    const r: Uint64 = this.r;
    const rabs: Uint64 = this.rabs;
    let x: number;
    let xx: number;
    let yy: number;
    for (;;) {
      this.bitsGenerator.nextUint64(r);
      const idx: number = r.rightmostByte();
      rabs.copyFrom(r);
      rabs.inplace64RightShift9();
      rabs.clearLeftmost12bits();
      const rabsNum: number = rabs.rightmost52bits();
      x = rabsNum * wiDouble[idx];
      if (r.isBit9fromRightSet()) x = -x;
      if (rabs.isLessThan(kiUint64[idx])) return x; /* 99.3% of the time return here */
      if (idx === 0) {
        const condition: boolean = rabs.isBit9fromRightSet();
        for (;;) {
          /* Switch to 1.0 - U to avoid log(0.0), see GH 13361 */
          xx = -zigguratNorInvR * Math.log1p(-this.randomUnit());
          yy = -Math.log1p(-this.randomUnit());
          if (yy + yy > xx * xx) return condition ? -(zigguratNorR + xx) : zigguratNorR + xx;
        }
      } else {
        if ((fiDouble[idx - 1] - fiDouble[idx]) * this.randomUnit() + fiDouble[idx] < Math.exp(-0.5 * x * x)) return x;
      }
    }
  }
}
